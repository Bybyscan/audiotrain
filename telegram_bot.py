# @Bybyscan 09.04.2025
import asyncio
import logging
from datetime import datetime
from pathlib import Path

from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

logger = logging.getLogger(__name__)


async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE, config, transcriber, analyzer):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.message.from_user
    logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.username} ({user.id})")

    try:
        if update.message.audio:
            file = await update.message.audio.get_file()
            file_name = f"audio_{user.id}_{int(datetime.now().timestamp())}.ogg"
        elif update.message.voice:
            file = await update.message.voice.get_file()
            file_name = f"voice_{user.id}_{int(datetime.now().timestamp())}.ogg"
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        input_path = config.paths['input'] / file_name
        input_path.parent.mkdir(exist_ok=True, parents=True)

        await file.download_to_drive(input_path)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {input_path}")

        await update.message.reply_text("üîä –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
        text = await transcriber.transcribe(input_path)

        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ")
            return

        await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
        results = await analyzer.analyze(text)

        await _send_results(update, results, config)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'input_path' in locals() and input_path.exists():
            input_path.unlink()


async def _send_results(update: Update, results: Dict[str, str], config):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        output_dir = config.paths['output']
        output_dir.mkdir(exist_ok=True, parents=True)

        await update.message.reply_text("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:")
        for i in range(0, len(results['original']), config.MAX_TEXT_LENGTH):
            await update.message.reply_text(results['original'][i:i + config.MAX_TEXT_LENGTH])

        await update.message.reply_text("üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã:")
        await update.message.reply_text(results['theses'])

        await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")
        await update.message.reply_text(results['tasks'])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


async def run_bot(config):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        setup_logging(config)

        for path in config.paths.values():
            path.mkdir(parents=True, exist_ok=True)

        await check_dependencies()
        await test_api_connection(config)

        app = Application.builder().token(config.TELEGRAM_TOKEN).build()

        transcriber = Transcriber(config)
        analyzer = TextAnalyzer(config)

        app.add_handler(MessageHandler(
            filters.AUDIO | filters.VOICE,
            lambda update, context: handle_audio(update, context, config, transcriber, analyzer)
        ))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await app.initialize()
        await app.start()
        await app.updater.start_polling()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        while True:
            await asyncio.sleep(3600)

    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise
    finally:
        if 'app' in locals():
            await app.updater.stop()
            await app.stop()
            await app.shutdown()
